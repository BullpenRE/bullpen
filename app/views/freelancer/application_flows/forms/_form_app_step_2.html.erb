<%= form_for :job_application, url: wizard_path, method: :put, remote: true do |f| %>
<div class="modal-body pt-0">
  <%= f.hidden_field :job_application_id, value: job_application.id %>
  <%= f.hidden_field 'step', value: 'application_step_2' %>

  <div class="form-group">
    <div class="d-flex justify-content-between">
      <label for="coverLetter" class="h5">Cover Letter</label>
    </div>
    <%= f.rich_text_area :cover_letter, value: job_application.cover_letter, class: "form-control", id: "coverLetter", placeholder: "Enter your cover letter", rows: "10", required: true %>
  </div>
  <div class="form-group work_sample">
    <label for="workSample" class="h5">Work Samples<span class="text-dark font-weight-normal"> (Optional but recommended)</span></label>
    <% if job_application.work_samples.attached? %>
      <% job_application.work_samples.each do |work_sample| %>
        <div id="<%= work_sample.signed_id %>">
          <div class="file-name text-break mb-2">
            <button type="button" class="delete-work-sample" id="deleteWorkSample-<%= work_sample.signed_id %>" data-id="<%= work_sample.signed_id %>"></button>
            <label class="btn btn-outline-danger ml-sm-2 delete d-block d-sm-inline" for="deleteWorkSample-<%= work_sample.signed_id %>">
              Delete
            </label>
            <%= work_sample.filename.to_s %>
          </div>
        </div>
      <% end %>
    <% end %>
    <div class="custom-file">
      <%= f.file_field :work_samples, multiple: true, name: 'work_samples', class: "d-none", id: "uploadWorkSample" %>
      <label class="btn btn-outline-primary upload-work-sample d-block d-sm-inline" for="uploadWorkSample">
        Attach a File
      </label>
    </div>
  </div>
  <div class="custom-control custom-checkbox mb-3">
    <%= f.check_box :template,
                    id: "template",
                    :class => "custom-control-input" %>
    <label class="custom-control-label text-secondary font-weight-bold" for="template">Use this as a template for future applications</label>
  </div>
</div>
<div class="modal-footer">
  <%= button_tag type: 'submit', value: 'back', class: "btn btn-outline-primary" do %>
    <i class="fas fa-chevron-left mr-2"></i>Back
  <% end %>
  <div class="d-none d-sm-block ml-auto">
    <%= button_tag type: 'submit', value: 'draft', class: "btn btn-outline-primary mr-1" do %>
      Save as Draft
    <% end %>
    <%= button_tag type: 'submit', class: "btn btn-primary" do %>
      Preview Job Post<i class="fas fa-chevron-right ml-2"></i>
    <% end %>
  </div>
  <%= button_tag type: 'submit', value: 'draft', class: "btn btn-outline-primary mr-1 d-sm-none ml-auto" do %>
    Save</i>
  <% end %>
  <%= button_tag type: 'submit', class: "btn btn-primary d-sm-none" do %>
    Preview<i class="fas fa-chevron-right ml-2"></i>
  <% end %>
</div>
<% end %>

<script>
  function tooLargeFilesExist(files) {
    const maxFileSize = 20971520;
    const tooLargeFiles = files.filter(function(file) {
      return (file.size && file.size > maxFileSize)
    });
    return tooLargeFiles.length > 0
  }

  function getFilesArray(fileListObject) {
    let filesArray = [];
    for (let i = 0; i < fileListObject.length; i++) {
      filesArray.push(fileListObject[i])
    }
    return filesArray
  }

  function sendFile (file) {
      const app_id = '<%= job_application.id %>';
      const formData = new FormData();
      formData.append('work_sample', file);
      formData.append('app_id', app_id);
      $.ajax({
          url: '/work_sample/update',
          method: 'PUT',
          contentType: false,
          processData: false,
          dataType: 'json',
          data: formData,
          success: (data) => {
              const fileName = data['file_name'];
              $('.file-name').html('This file was attached: ' + fileName);
          },
          error: () => {
              const message = `File ${file.name} was not uploaded.`;
              Swal.fire({
                  title: '<h5>Oops!</h5>',
                  text: message
              });
          }
      });
  }

  $('.work_sample').on('change', '#uploadWorkSample', (e) => {
    const fileListObject = e.target.files;
    const filesArray = getFilesArray(fileListObject);


    if (tooLargeFilesExist(filesArray)) {
      const message = "Uploaded files must not exceed 20MB\n";
      Swal.fire({
        title: '<h5>Oops!</h5>',
        text: message
      });
    } else {
      filesArray.forEach(function(file) {
          sendFile(file)
      });
    }
  });

  $('.work_sample').on('click', '.delete-work-sample', (e) => {
    const clickedWorkSample = $(e.target).data('blob_key');
    const app_id = '<%= job_application.id %>';
    const formData = new FormData();
    formData.append('app_id', app_id);
    formData.append('blob_key', clickedWorkSample);
    $.ajax({
      url: '/work_sample/destroy',
      method: 'POST',
      dataType: 'json',
      contentType: false,
      processData: false,
      data: formData,
      success: () => {
        $('#file-' + clickedWorkSample).addClass('d-none');
      },
    })
  });

  // Disable trix from accepted pasted or dragged/dropped files
  document.addEventListener("trix-file-accept", event => {
    event.preventDefault();
  });
</script>
